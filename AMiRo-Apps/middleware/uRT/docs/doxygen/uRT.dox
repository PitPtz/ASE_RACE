/*
µRT is a lightweight publish-subscribe & RPC middleware for real-time
applications. It was developed as part of the software habitat for the
Autonomous Mini Robot (AMiRo) but can be used for other purposes as well.

Copyright (C) 2018..2022  Thomas Schöpping et al.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @defgroup kernel Core
 *
 * @brief   Core components of µRT.
 * @details Core components of µRT comprise configuration, primitive type
 *          definitions, core API, node API and the synchronization subsystem.
 *          All but the last of these components are central components of µRT
 *          and thus are always present.
 *          The synchronization subsystem is optional, though, and can be
 *          disabled via the configuration.
 */

/**
 * @defgroup pubsub Publish-Subscribe
 *
 * @brief   Publish-subscribe subsystem to facilitate unidirectional,
 *          bradcasting communication.
 * @details Communication using the publish-subscribe paradigm always involves
 *          three entities.
 *          While publishers emit messages, subscribers act as receivers.
 *          Publishers and subscriber do not communicate with each other
 *          directly, though, but via topics.
 * @note    The entire publsh-subscribe subsystem can be disabled via the
 *          configuration.
 */
 
 /**
 * @defgroup rpc Remote Procedure Call
 *
 * @brief   Remote procedure call (RPC) subsystem to facilitate bidirectional
 *          communication.
 * @details Communication using the RPC paradigm always involves two entities.
 *          Requests are submitted to services, which process the requests and
 *          eventually send back a response.
 * @note    The entire RPC subsystem can be disabled via the configuration.
 */
