diff --git a/os/hal/lib/streams/chprintf.c b/os/hal/lib/streams/chprintf.c
--- a/os/hal/lib/streams/chprintf.c
+++ b/os/hal/lib/streams/chprintf.c
@@ -31,17 +31,32 @@
 #include "hal.h"
 #include "chprintf.h"
 #include "memstreams.h"
+#if CHPRINTF_USE_FLOAT
+#include "math.h"
+#endif
 
+#if CHPRINTF_USE_FLOAT || CHPRINTF_SUPPORT_LONGLONG
+#define MAX_FILLER 22
+#else
 #define MAX_FILLER 11
+#endif
 #define FLOAT_PRECISION 9
 
+#if CHPRINTF_SUPPORT_LONGLONG
+static char *longlong_to_string_with_divisor(char *p,
+                                             long long num,
+                                             unsigned radix,
+                                             long divisor) {
+  long long l, ll;
+#else
 static char *long_to_string_with_divisor(char *p,
                                          long num,
                                          unsigned radix,
                                          long divisor) {
+  long l, ll;
+#endif
   int i;
   char *q;
-  long l, ll;
 
   l = num;
   if (divisor == 0) {
@@ -50,7 +65,11 @@ static char *long_to_string_with_divisor(char *p,
     ll = divisor;
   }
 
+#if CHPRINTF_USE_FLOAT || CHPRINTF_SUPPORT_LONGLONG
+  q = p + (MAX_FILLER/2);
+#else
   q = p + MAX_FILLER;
+#endif
   do {
     i = (int)(l % radix);
     i += '0';
@@ -61,7 +80,11 @@ static char *long_to_string_with_divisor(char *p,
     l /= radix;
   } while ((ll /= radix) != 0);
 
+#if CHPRINTF_USE_FLOAT || CHPRINTF_SUPPORT_LONGLONG
+  i = (int)(p + (MAX_FILLER/2) - q);
+#else
   i = (int)(p + MAX_FILLER - q);
+#endif
   do
     *p++ = *q++;
   while (--i);
@@ -69,10 +92,15 @@ static char *long_to_string_with_divisor(char *p,
   return p;
 }
 
+#if CHPRINTF_SUPPORT_LONGLONG
+static char *ch_lltoa(char *p, long long num, unsigned radix) {
+  return longlong_to_string_with_divisor(p, num, radix, 0);
+}
+#else
 static char *ch_ltoa(char *p, long num, unsigned radix) {
-
   return long_to_string_with_divisor(p, num, radix, 0);
 }
+#endif
 
 #if CHPRINTF_USE_FLOAT
 static const long pow10[FLOAT_PRECISION] = {
@@ -88,11 +116,19 @@ static char *ftoa(char *p, double num, unsigned long precision) {
   precision = pow10[precision - 1];
 
   l = (long)num;
+#if CHPRINTF_SUPPORT_LONGLONG
+  p = longlong_to_string_with_divisor(p, l, 10, 0);
+#else
   p = long_to_string_with_divisor(p, l, 10, 0);
+#endif
   *p++ = '.';
   l = (long)((num - l) * precision);
 
+#if CHPRINTF_SUPPORT_LONGLONG
+  return longlong_to_string_with_divisor(p, l, 10, precision / 10);
+#else
   return long_to_string_with_divisor(p, l, 10, precision / 10);
+#endif
 }
 #endif
 
@@ -100,7 +136,7 @@ static char *ftoa(char *p, double num, unsigned long precision) {
  * @brief   System formatted output function.
  * @details This function implements a minimal @p vprintf()-like functionality
  *          with output on a @p BaseSequentialStream.
- *          The general parameters format is: %[-][width|*][.precision|*][l|L]p.
+ *          The general parameters format is: %[-][width|*][.precision|*][l|L][l|L]p.
  *          The following parameter types (p) are supported:
  *          - <b>x</b> hexadecimal integer.
  *          - <b>X</b> hexadecimal long.
@@ -127,13 +163,16 @@ int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
   int i, precision, width;
   int n = 0;
   bool is_long, left_align, do_sign;
+#if CHPRINTF_SUPPORT_LONGLONG
+  bool is_longlong;
+  long long l;
+#else
   long l;
+#endif
 #if CHPRINTF_USE_FLOAT
   float f;
-  char tmpbuf[2*MAX_FILLER + 1];
-#else
-  char tmpbuf[MAX_FILLER + 1];
 #endif
+  char tmpbuf[MAX_FILLER + 1];
 
   while (true) {
     c = *fmt++;
@@ -229,6 +268,19 @@ int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
       is_long = (c >= 'A') && (c <= 'Z');
     }
 
+#if CHPRINTF_SUPPORT_LONGLONG
+    /* long long modifier */
+    if (is_long && (c == 'l' || c == 'L')) {
+      is_longlong = true;
+      c = *fmt++;
+      if (c == 0) {
+        return n;
+      }
+    } else {
+      is_longlong = false;
+    }
+#endif
+
     /* Command decoding.*/
     switch (c) {
     case 'c':
@@ -250,6 +302,11 @@ int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
     case 'd':
     case 'I':
     case 'i':
+#if CHPRINTF_SUPPORT_LONGLONG
+      if (is_longlong) {
+        l = va_arg(ap, long long);
+      } else
+#endif
       if (is_long) {
         l = va_arg(ap, long);
       }
@@ -264,21 +321,33 @@ int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
         if (do_sign) {
           *p++ = '+';
         }
+#if CHPRINTF_SUPPORT_LONGLONG
+      p = ch_lltoa(p, l, 10);
+#else
       p = ch_ltoa(p, l, 10);
+#endif
       break;
 #if CHPRINTF_USE_FLOAT
     case 'f':
       f = (float) va_arg(ap, double);
-      if (f < 0) {
-        *p++ = '-';
-        f = -f;
+      if (isfinite(f)) {
+        if (f < 0) {
+          *p++ = '-';
+          f = -f;
+        }
+        else {
+          if (do_sign) {
+            *p++ = '+';
+          }
+        }
+        p = ftoa(p, f, precision);
       }
       else {
-        if (do_sign) {
-          *p++ = '+';
+        const char* fpcode = isinf(f) ? "(inf)" : isnan(f) ? "(nan)" : "(err)";
+        while (*fpcode != '\0') {
+          *p++ = *fpcode++;
         }
       }
-      p = ftoa(p, f, precision);
       break;
 #endif
     case 'X':
@@ -295,13 +364,22 @@ int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
     case 'o':
       c = 8;
 unsigned_common:
+#if CHPRINTF_SUPPORT_LONGLONG
+      if (is_longlong) {
+        l = va_arg(ap, unsigned long long);
+      } else
+#endif
       if (is_long) {
         l = va_arg(ap, unsigned long);
       }
       else {
         l = va_arg(ap, unsigned int);
       }
+#if CHPRINTF_SUPPORT_LONGLONG
+      p = ch_lltoa(p, l, c);
+#else
       p = ch_ltoa(p, l, c);
+#endif
       break;
     default:
       *p++ = c;
diff --git a/os/hal/lib/streams/chprintf.h b/os/hal/lib/streams/chprintf.h
--- a/os/hal/lib/streams/chprintf.h
+++ b/os/hal/lib/streams/chprintf.h
@@ -34,6 +34,13 @@
 #define CHPRINTF_USE_FLOAT          FALSE
 #endif
 
+/**
+ * @brief   Long long type support.
+ */
+#if !defined(CHPRINTF_SUPPORT_LONGLONG) || defined(__DOXYGEN__)
+#define CHPRINTF_SUPPORT_LONGLONG   FALSE
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
