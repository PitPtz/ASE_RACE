ARM GAS  /tmp/ccZlMIXm.s 			page 1


   1              	# 1 "../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S"
   1              	/*
   0              	
   0              	
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3              	
   4              	    Licensed under the Apache License, Version 2.0 (the "License");
   5              	    you may not use this file except in compliance with the License.
   6              	    You may obtain a copy of the License at
   7              	
   8              	        http://www.apache.org/licenses/LICENSE-2.0
   9              	
  10              	    Unless required by applicable law or agreed to in writing, software
  11              	    distributed under the License is distributed on an "AS IS" BASIS,
  12              	    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13              	    See the License for the specific language governing permissions and
  14              	    limitations under the License.
  15              	*/
  16              	
  17              	/**
  18              	 * @file    crt0_v6m.S
  19              	 * @brief   Generic ARMv6-M (Cortex-M0/M1) startup file for ChibiOS.
  20              	 *
  21              	 * @addtogroup ARMCMx_GCC_STARTUP_V6M
  22              	 * @{
  23              	 */
  24              	
  25              	/*===========================================================================*/
  26              	/* Module constants.                                                         */
  27              	/*===========================================================================*/
  28              	
  29              	#if !defined(FALSE) || defined(__DOXYGEN__)
  30              	#define FALSE                               0
  31              	#endif
  32              	
  33              	#if !defined(TRUE) || defined(__DOXYGEN__)
  34              	#define TRUE                                1
  35              	#endif
  36              	
  37              	#define CONTROL_MODE_PRIVILEGED             0
  38              	#define CONTROL_MODE_UNPRIVILEGED           1
  39              	#define CONTROL_USE_MSP                     0
  40              	#define CONTROL_USE_PSP                     2
  41              	
  42              	#define SCB_VTOR                            0xE000ED08
  43              	
  44              	/*===========================================================================*/
  45              	/* Module pre-compile time settings.                                         */
  46              	/*===========================================================================*/
  47              	
  48              	/**
  49              	 * @brief   Enforces initialization of MSP.
  50              	 * @note    This is required if the boot process is not reliable for whatever
  51              	 *          reason (bad ROMs, bad bootloaders, bad debuggers=.
  52              	 */
  53              	#if !defined(CRT0_FORCE_MSP_INIT) || defined(__DOXYGEN__)
  54              	#define CRT0_FORCE_MSP_INIT                 TRUE
ARM GAS  /tmp/ccZlMIXm.s 			page 2


  55              	#endif
  56              	
  57              	/**
  58              	 * @brief   VTOR special register initialization.
  59              	 * @details VTOR is initialized to point to the vectors table.
  60              	 * @note    This option can only be enabled on Cortex-M0+ cores.
  61              	 */
  62              	#if !defined(CRT0_VTOR_INIT) || defined(__DOXYGEN__)
  63              	#define CRT0_VTOR_INIT                      FALSE
  64              	#endif
  65              	
  66              	/**
  67              	 * @brief   Control special register initialization value.
  68              	 * @details The system is setup to run in privileged mode using the PSP
  69              	 *          stack (dual stack mode).
  70              	 */
  71              	#if !defined(CRT0_CONTROL_INIT) || defined(__DOXYGEN__)
  72              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  73              	                                             CONTROL_MODE_PRIVILEGED)
  74              	#endif
  75              	
  76              	/**
  77              	 * @brief   Core initialization switch.
  78              	 */
  79              	#if !defined(CRT0_INIT_CORE) || defined(__DOXYGEN__)
  80              	#define CRT0_INIT_CORE                      TRUE
  81              	#endif
  82              	
  83              	/**
  84              	 * @brief   Stack segments initialization switch.
  85              	 */
  86              	#if !defined(CRT0_STACKS_FILL_PATTERN) || defined(__DOXYGEN__)
  87              	#define CRT0_STACKS_FILL_PATTERN            0x55555555
  88              	#endif
  89              	
  90              	/**
  91              	 * @brief   Stack segments initialization switch.
  92              	 */
  93              	#if !defined(CRT0_INIT_STACKS) || defined(__DOXYGEN__)
  94              	#define CRT0_INIT_STACKS                    TRUE
  95              	#endif
  96              	
  97              	/**
  98              	 * @brief   Vectors table initialization.
  99              	 * @details Vectors are copied in RAM on startup.
 100              	 */
 101              	#if !defined(CRT0_INIT_VECTORS) || defined(__DOXYGEN__)
 102              	#define CRT0_INIT_VECTORS                   FALSE
 103              	#endif
 104              	
 105              	/**
 106              	 * @brief   DATA segment initialization switch.
 107              	 */
 108              	#if !defined(CRT0_INIT_DATA) || defined(__DOXYGEN__)
 109              	#define CRT0_INIT_DATA                      TRUE
 110              	#endif
 111              	
ARM GAS  /tmp/ccZlMIXm.s 			page 3


 112              	/**
 113              	 * @brief   BSS segment initialization switch.
 114              	 */
 115              	#if !defined(CRT0_INIT_BSS) || defined(__DOXYGEN__)
 116              	#define CRT0_INIT_BSS                       TRUE
 117              	#endif
 118              	
 119              	/**
 120              	 * @brief   RAM areas initialization switch.
 121              	 */
 122              	#if !defined(CRT0_INIT_RAM_AREAS) || defined(__DOXYGEN__)
 123              	#define CRT0_INIT_RAM_AREAS                 TRUE
 124              	#endif
 125              	
 126              	/**
 127              	 * @brief   Constructors invocation switch.
 128              	 */
 129              	#if !defined(CRT0_CALL_CONSTRUCTORS) || defined(__DOXYGEN__)
 130              	#define CRT0_CALL_CONSTRUCTORS              TRUE
 131              	#endif
 132              	
 133              	/**
 134              	 * @brief   Destructors invocation switch.
 135              	 */
 136              	#if !defined(CRT0_CALL_DESTRUCTORS) || defined(__DOXYGEN__)
 137              	#define CRT0_CALL_DESTRUCTORS               TRUE
 138              	#endif
 139              	
 140              	/**
 141              	 * @brief   Number of extra cores.
 142              	 */
 143              	#if !defined(CRT0_EXTRA_CORES_NUMBER) || defined(__DOXYGEN__)
 144              	#define CRT0_EXTRA_CORES_NUMBER             0
 145              	#endif
 146              	
 147              	/*===========================================================================*/
 148              	/* Code section.                                                             */
 149              	/*===========================================================================*/
 150              	
 151              	#if !defined(__DOXYGEN__)
 152              	
 153              	                .cpu    cortex-m0
 154              	                .fpu    softvfp
 155              	                .syntax unified
 156              	                .thumb
 157              	                .text
 158              	
 159              	/*
 160              	 * CRT0 entry point.
 161              	 */
 162              	                .align  2
 163              	                .thumb_func
 164              	                .global _crt0_entry
 165              	_crt0_entry:
 166              	                /* Interrupts are globally masked initially.*/
 167 0000 72B6     	                cpsid   i
 168              	
ARM GAS  /tmp/ccZlMIXm.s 			page 4


 169              	#if CRT0_FORCE_MSP_INIT == TRUE
 170              	                /* MSP stack pointers initialization.*/
 171 0002 2448     	                ldr     r0, =__main_stack_end__
 172 0004 80F30888 	                msr     MSP, r0
 173              	#endif
 174              	
 175              	                /* PSP stack pointers initialization.*/
 176 0008 2348     	                ldr     r0, =__process_stack_end__
 177 000a 80F30988 	                msr     PSP, r0
 178              	
 179              	                /* CPU mode initialization as configured.*/
 180 000e 0220     	                movs    r0, #CRT0_CONTROL_INIT
 181 0010 80F31488 	                msr     CONTROL, r0
 182 0014 BFF36F8F 	                isb
 183              	
 184              	#if CRT0_VTOR_INIT == TRUE
 185              	                ldr     r0, =_vectors
 186              	                ldr     r1, =SCB_VTOR
 187              	                str     r0, [r1]
 188              	#endif
 189              	
 190              	#if CRT0_INIT_CORE == TRUE
 191              	                /* Core initialization.*/
 192 0018 FFF7FEFF 	                bl      __cpu_init
 193              	#endif
 194              	
 195              	                /* Early initialization..*/
 196 001c FFF7FEFF 	                bl      __early_init
 197              	
 198              	#if CRT0_INIT_STACKS == TRUE
 199 0020 1E48     	                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 200              	                /* Main Stack initialization. Note, it assumes that the
 201              	                   stack size is a multiple of 4 so the linker file must
 202              	                   ensure this.*/
 203 0022 1F49     	                ldr     r1, =__main_stack_base__
 204 0024 1B4A     	                ldr     r2, =__main_stack_end__
 205              	msloop:
 206 0026 9142     	                cmp     r1, r2
 207 0028 02DA     	                bge     endmsloop
 208 002a 0860     	                str     r0, [r1]
 209 002c 0431     	                adds    r1, #4
 210 002e FAE7     	                b       msloop
 211              	endmsloop:
 212              	                /* Process Stack initialization. Note, it assumes that the
 213              	                   stack size is a multiple of 4 so the linker file must
 214              	                   ensure this.*/
 215 0030 1C49     	                ldr     r1, =__process_stack_base__
 216 0032 194A     	                ldr     r2, =__process_stack_end__
 217              	psloop:
 218 0034 9142     	                cmp     r1, r2
 219 0036 02DA     	                bge     endpsloop
 220 0038 0860     	                str     r0, [r1]
 221 003a 0431     	                adds    r1, #4
 222 003c FAE7     	                b       psloop
 223              	endpsloop:
 224              	#endif
 225              	
ARM GAS  /tmp/ccZlMIXm.s 			page 5


 226              	#if CRT0_INIT_VECTORS == TRUE
 227              	                /* Vectors initialization. Note, it assumes that the vectors
 228              	                   size is a multiple of 4 so the linker file must ensure
 229              	                   this.*/
 230              	                ldr     r1, =__textvectors_base__
 231              	                ldr     r2, =__vectors_base__
 232              	                ldr     r3, =__vectors_end__
 233              	                mov     r4, r2
 234              	vloop:
 235              	                cmp     r2, r3
 236              	                bge     endvloop
 237              	                ldr     r0, [r1]
 238              	                str     r0, [r2]
 239              	                adds    r1, #4
 240              	                adds    r2, #4
 241              	                b       vloop
 242              	endvloop:
 243              	
 244              	                /* VTOR now pointing to the RAM table.*/
 245              	                ldr     r1, =SCB_VTOR
 246              	                str     r4, [r1]
 247              	#endif
 248              	
 249              	#if CRT0_INIT_DATA == TRUE
 250              	                /* Data initialization. Note, it assumes that the DATA
 251              	                   size is a multiple of 4 so the linker file must ensure
 252              	                   this.*/
 253 003e 1A49     	                ldr     r1, =__textdata_base__
 254 0040 1A4A     	                ldr     r2, =__data_base__
 255 0042 1B4B     	                ldr     r3, =__data_end__
 256              	dloop:
 257 0044 9A42     	                cmp     r2, r3
 258 0046 04DA     	                bge     enddloop
 259 0048 0868     	                ldr     r0, [r1]
 260 004a 1060     	                str     r0, [r2]
 261 004c 0431     	                adds    r1, #4
 262 004e 0432     	                adds    r2, #4
 263 0050 F8E7     	                b       dloop
 264              	enddloop:
 265              	#endif
 266              	
 267              	#if CRT0_INIT_BSS == TRUE
 268              	                /* BSS initialization. Note, it assumes that the DATA
 269              	                   size is a multiple of 4 so the linker file must ensure
 270              	                   this.*/
 271 0052 0020     	                movs    r0, #0
 272 0054 1749     	                ldr     r1, =__bss_base__
 273 0056 184A     	                ldr     r2, =__bss_end__
 274              	bloop:
 275 0058 9142     	                cmp     r1, r2
 276 005a 02DA     	                bge     endbloop
 277 005c 0860     	                str     r0, [r1]
 278 005e 0431     	                adds    r1, #4
 279 0060 FAE7     	                b       bloop
 280              	endbloop:
 281              	#endif
 282              	
ARM GAS  /tmp/ccZlMIXm.s 			page 6


 283              	#if CRT0_INIT_RAM_AREAS == TRUE
 284              	                /* RAM areas initialization.*/
 285 0062 FFF7FEFF 	                bl      __init_ram_areas
 286              	#endif
 287              	
 288              	                /* Late initialization..*/
 289 0066 FFF7FEFF 	                bl      __late_init
 290              	
 291              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 292              	                /* Constructors invocation.*/
 293 006a 144C     	                ldr     r4, =__init_array_base__
 294 006c 144D     	                ldr     r5, =__init_array_end__
 295              	initloop:
 296 006e AC42     	                cmp     r4, r5
 297 0070 03DA     	                bge     endinitloop
 298 0072 2168     	                ldr     r1, [r4]
 299 0074 8847     	                blx     r1
 300 0076 0434     	                adds    r4, #4
 301 0078 F9E7     	                b       initloop
 302              	endinitloop:
 303              	#endif
 304              	
 305              	                /* Main program invocation, r0 contains the returned value.*/
 306 007a FFF7FEFF 	                bl      main
 307              	
 308              	#if CRT0_CALL_DESTRUCTORS == TRUE
 309              	                /* Destructors invocation.*/
 310 007e 114C     	                ldr     r4, =__fini_array_base__
 311 0080 114D     	                ldr     r5, =__fini_array_end__
 312              	finiloop:
 313 0082 AC42     	                cmp     r4, r5
 314 0084 03DA     	                bge     endfiniloop
 315 0086 2168     	                ldr     r1, [r4]
 316 0088 8847     	                blx     r1
 317 008a 0434     	                adds    r4, #4
 318 008c F9E7     	                b       finiloop
 319              	endfiniloop:
 320              	#endif
 321              	
 322              	                /* Branching to the defined exit handler.*/
 323 008e 0F49     	                ldr     r1, =__default_exit
 324 0090 08470000 	                bx      r1
 324      00000000 
 324      00000000 
 324      55555555 
 324      00000000 
ARM GAS  /tmp/ccZlMIXm.s 			page 7


DEFINED SYMBOLS
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:162    .text:0000000000000000 $t
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:165    .text:0000000000000000 _crt0_entry
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:205    .text:0000000000000026 msloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:211    .text:0000000000000030 endmsloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:217    .text:0000000000000034 psloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:223    .text:000000000000003e endpsloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:256    .text:0000000000000044 dloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:264    .text:0000000000000052 enddloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:274    .text:0000000000000058 bloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:280    .text:0000000000000062 endbloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:295    .text:000000000000006e initloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:302    .text:000000000000007a endinitloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:312    .text:0000000000000082 finiloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:319    .text:000000000000008e endfiniloop
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:324    .text:0000000000000092 $d
../../kernel/ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:324    .text:0000000000000094 $d

UNDEFINED SYMBOLS
__main_stack_end__
__process_stack_end__
__cpu_init
__early_init
__main_stack_base__
__process_stack_base__
__textdata_base__
__data_base__
__data_end__
__bss_base__
__bss_end__
__init_ram_areas
__late_init
__init_array_base__
__init_array_end__
main
__fini_array_base__
__fini_array_end__
__default_exit
